basePath: /
definitions:
  dto.CreatePersonRequest:
    properties:
      name:
        example: John
        type: string
      patronymic:
        example: Dmitrievich
        type: string
      surname:
        example: Snow
        type: string
    required:
    - name
    - surname
    type: object
  dto.ErrorResponse:
    properties:
      error:
        example: Something went wrong
        type: string
    type: object
  dto.PersonResponse:
    properties:
      age:
        example: 20
        type: integer
      gender:
        example: Male
        type: string
      name:
        example: Matvey
        type: string
      nationality:
        example: RU
        type: string
      patronymic:
        example: Dmitrievich
        type: string
      surname:
        example: Likhanov
        type: string
    type: object
  dto.UpdatePersonRequest:
    properties:
      age:
        example: 30
        type: integer
      gender:
        example: Male
        type: string
      name:
        example: John
        type: string
      nationality:
        example: RU
        type: string
      patronymic:
        example: Dmitrievich
        type: string
      surname:
        example: Snow
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for getting most probable age, gender, nationality for a person
  title: Person Info API
  version: "1.0"
paths:
  /people:
    get:
      description: Get people using filters and pagination
      parameters:
      - example: 30
        in: query
        maximum: 100
        minimum: 1
        name: age
        type: integer
      - enum:
        - male
        - female
        example: male
        in: query
        name: gender
        type: string
      - example: John
        in: query
        name: name
        type: string
      - example: RU
        in: query
        name: nationality
        type: string
      - example: Dmitrich
        in: query
        name: patronymic
        type: string
      - example: Snow
        in: query
        name: surname
        type: string
      - example: 1
        in: query
        minimum: 1
        name: page
        type: integer
      - example: 10
        in: query
        minimum: 1
        name: size
        type: integer
      - enum:
        - asc
        - desc
        example: desc
        in: query
        name: order
        type: string
      - enum:
        - name
        - surname
        - age
        example: name
        in: query
        name: sort_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched people
          schema:
            items:
              $ref: '#/definitions/dto.PersonResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get people
      tags:
      - /people
    post:
      consumes:
      - application/json
      description: Saves a person enriching with age, gender, nationality
      parameters:
      - description: Person request data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePersonRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully saved person
          schema:
            $ref: '#/definitions/dto.PersonResponse'
        "400":
          description: Invalid request data
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "409":
          description: Person already exists
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Save new person
      tags:
      - /people
  /people/{id}:
    delete:
      description: Deletes a person by person id
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: Person deleted successfully
        "400":
          description: Missing or invalid id
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Person not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a person
      tags:
      - /people
    patch:
      consumes:
      - application/json
      description: Updates a person by id
      parameters:
      - description: Person ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePersonRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Updated person
          schema:
            $ref: '#/definitions/dto.PersonResponse'
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "404":
          description: Person not found
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update a person
      tags:
      - /people
schemes:
- http
swagger: "2.0"
